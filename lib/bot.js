// Generated by CoffeeScript 1.3.3
(function() {
  var AUTH, Bot, DJQueue, FastestFingers, Interactivity, Moderate, Operate, Pm, ROOM, Room, Speaker, TTBot, USERID, UserManagement, VDubsId, auth_arg, bot, config, debug, log, rand, room, room_arg, util, wait, _ref, _ref1, _ref2,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  util = require('util');

  Bot = require("../lib/ttapi/index");

  config = require("../config.json");

  config.debug = (_ref = process.env.DEBUG) != null ? _ref : false;

  config.log = (_ref1 = process.env.LOG) != null ? _ref1 : false;

  log = function(msg) {
    if (config.log) {
      return console.log(msg);
    }
  };

  debug = function(msg) {
    if (config.debug) {
      return console.log(msg);
    }
  };

  rand = function(min, max) {
    if (!min) {
      min = 1;
    }
    if (!max) {
      max = 6;
    }
    return Math.floor(Math.random() * (max - min + 1) + min);
  };

  wait = function(min, max) {
    if (!min) {
      min = 1;
    }
    if (!max) {
      max = 6;
    }
    return rand(min, max) * 1000;
  };

  VDubsId = config.userids['vdubs'];

  _ref2 = process.argv.slice(2, 4), auth_arg = _ref2[0], room_arg = _ref2[1];

  AUTH = config.auths[auth_arg];

  USERID = config.userids[auth_arg];

  ROOM = room_arg ? config.rooms[room_arg] : null;

  /*   TTBot class
  */


  TTBot = (function(_super) {

    __extends(TTBot, _super);

    TTBot.prototype.dance_matches = ['bop', 'dance', 'boogie', 'waltz', 'mosh', 'stagedive', 'thrash', 'salza', 'trance', 'stance', 'shake', 'rattle', 'roll', 'bounce'];

    TTBot.prototype.userId = null;

    TTBot.prototype.authId = null;

    TTBot.prototype.roomId = null;

    TTBot.prototype.votes = 0;

    TTBot.prototype.vote_attempts = 0;

    TTBot.prototype.room_rules = "Play whatever you want, as long as it's alt/grunge/indie/etc " + "from the 80's through now. Respect your other DJ's on stage - " + "show them some love - awesome their songs! And show " + "@subadubadoo some respect! He loves to dance and eat and " + "imbibe various liquids.";

    TTBot.prototype.toggles = {
      autodj: false,
      autobop: false,
      announce_stats: false,
      do_dj_announce: false,
      friendly: false,
      snarky: false,
      grateful: false,
      chatty: false,
      likes_to_drink: false
    };

    TTBot.prototype.djannounce = "Welcome! Play good music, awesome every song, don't be a dick.";

    TTBot.prototype.djgoodbye = false;

    TTBot.prototype.autodj_threshold = 2;

    function TTBot(userId, authId, roomId) {
      this.userId = userId;
      this.authId = authId;
      this.roomId = roomId;
      this.do_pm_action = __bind(this.do_pm_action, this);

      this.do_new_dj = __bind(this.do_new_dj, this);

      this.operate = __bind(this.operate, this);

      this.interact = new Interactivity(this);
      TTBot.__super__.constructor.call(this, this.userId, this.authId, this.roomId);
      this.reset();
    }

    TTBot.prototype.reset = function() {
      var arg, i, _i, _len, _ref3;
      this.votes = 0;
      this.vote_attempts = 0;
      log("WTF");
      if (auth_arg !== config.primary) {
        debug("Swapping toggles");
        _ref3 = this.toggles;
        for (i = _i = 0, _len = _ref3.length; _i < _len; i = ++_i) {
          arg = _ref3[i];
          this.toggles[i] = false && debug("Falsed " + arg + ":" + i);
        }
      }
      debug(util.inspect(this.toggles));
      return log("WTFER");
    };

    TTBot.prototype.update = function(data, cb) {
      var _this = this;
      if (data) {
        if (data.room) {
          if (this.room) {
            this.room.update(data.room);
          } else {
            this.room = new Room(data.room);
          }
        }
        if (data.speaker) {
          this.speaker = new Speaker(data.speaker.userid, data.speaker.name, data.speaker.text);
        }
        if (data.pm) {
          this.pm_obj = new Pm(data.pm, this.room, this);
        }
      } else {
        this.roomInfo(function(data) {
          return _this.update({
            room: data
          });
        });
      }
      if (cb) {
        return cb();
      }
    };

    TTBot.prototype.operate = function() {
      this.interact.question_ones_makeup();
      this.interact.eat_a_subasnack();
      this.interact.drink_some_water();
      this.interact.drink_some_booze();
      this.interact.time_to_dance();
      return this.interact.what_are_the_rules();
    };

    TTBot.prototype.upvote = function() {
      var do_vote, time,
        _this = this;
      if (this.votes === 1) {
        return false;
      }
      time = wait();
      debug("#### Bopping in " + (time / 1000) + " sec #####");
      do_vote = function() {
        return _this.vote('up', function(data) {
          var error_msgs, _ref3;
          debug("Checking vote response: " + util.inspect(data, false, null));
          _this.vote_attempts += 1;
          if (data.err) {
            error_msgs = ["Cannot vote on your song", "User has already voted up"];
            if (_ref3 = !data.err, __indexOf.call(error_msgs, _ref3) >= 0) {
              _this.votes = 0;
              log("Retrying vote");
              if (!(_this.vote_attemtps > 5)) {
                return _this.upvote();
              }
            }
          } else {
            _this.votes = 1;
            return _this.interact.vote_commentary();
          }
        });
      };
      return setTimeout(do_vote, time);
    };

    TTBot.prototype.downvote = function() {
      if (this.votes === -1) {
        return false;
      }
      this.vote('down');
      return this.votes = -1;
    };

    TTBot.prototype.dj_down = function() {
      return this.remdDj(USERID);
    };

    TTBot.prototype.dj_up = function() {
      return this.addDj();
    };

    TTBot.prototype.do_new_song = function(data) {
      this.update({
        room: data
      });
      return this.reset();
    };

    TTBot.prototype.do_end_song = function() {
      if (this.toggles.announce_stats) {
        this.interact.announce_stats();
      }
      return this.autodj();
    };

    TTBot.prototype.autodj_action = function() {
      if (!this.autodj && this.im_a_dj()) {
        return -1;
      }
      if (this.im_a_dj) {
        if (this.open_slots() < this.autodj_threshold + 1) {
          return -1;
        } else {
          return 0;
        }
      } else {
        if (this.open_slots() <= this.autodj_threshold) {
          return 1;
        }
      }
    };

    TTBot.prototype.open_slots = function() {
      return this.room.max_djs - this.room.djcount;
    };

    TTBot.prototype.im_a_dj = function() {
      if (this.room.djs.indexOf(this.userId) !== -1) {
        return true;
      } else {
        return false;
      }
    };

    TTBot.prototype.autodj = function() {
      var cb;
      switch (this.autodj_action()) {
        case -1:
          if (this.room.current_dj === this.userId) {
            this.speak("Turtles after this song!");
            cb = function() {
              return this.dj_down;
            };
            this.on("endsong", cb);
            return this.on("newsong", function() {
              return this.once("endsong", cb);
            });
          } else {
            debug("####  Too many djs.  Getting down. ####");
            this.speak("Who likes turtles?");
            return setTimeout(this.dj_down, wait(2, 6));
          }
          break;
        case 1:
          log(("#####  I'm getting up to autodj.  Current slots: " + (this.open_slots())) + ("  Threshold: " + this.autodj_threshold + "  ####"));
          setTimeout(this.speak("Looks like there's room for me!  w00t!"), wait());
          return this.dj_up();
      }
    };

    TTBot.prototype.do_new_dj = function(data) {
      return this.interact.do_dj_announce(data.user[0].name);
    };

    TTBot.prototype.do_pm_action = function() {
      var m,
        _this = this;
      m = new Moderate(this);
      return this.pm_obj.decide(function(pm) {
        return m["do"](pm);
      });
    };

    TTBot.prototype.song_recap = function() {
      return ("" + this.room.dj.name + " Played: " + this.room.song.artist + " -- " + this.room.song.name + " -- ") + (":thumbsup:: " + this.room.votes.up + " :thumbsdown:: " + this.room.votes.down) + (" :heart:: " + this.room.snags + " :tomato:: " + (Math.round(this.room.vote_percentage())) + "%");
    };

    TTBot.prototype.log_song_info = function() {
      debug("#### Logging song stats ####");
      return log(this.song_recap());
    };

    TTBot.prototype.toggle = function(which) {
      this.toggles[which] = !this.toggles[which];
      return debug(util.inspect(this.toggles));
    };

    TTBot.prototype.update_votes = function(data) {
      return this.room.update_votes(data);
    };

    return TTBot;

  })(Bot);

  /*   Interactivity class
  */


  Interactivity = (function() {

    function Interactivity(bot) {
      this.bot = bot;
      this.vote_commentary = __bind(this.vote_commentary, this);

      this.what_are_the_rules = __bind(this.what_are_the_rules, this);

      this.time_to_dance = __bind(this.time_to_dance, this);

      this.question_ones_makeup = __bind(this.question_ones_makeup, this);

      this.eat_a_subasnack = __bind(this.eat_a_subasnack, this);

      this.drink_some_water = __bind(this.drink_some_water, this);

      this.drink_some_booze = __bind(this.drink_some_booze, this);

      this.do_dj_goodbye = __bind(this.do_dj_goodbye, this);

      this.do_dj_announce = __bind(this.do_dj_announce, this);

      this.announce_stats = __bind(this.announce_stats, this);

    }

    Interactivity.prototype.announce_stats = function() {
      debug("#### Speaking song stats ####");
      if (this.bot.toggles.chatty) {
        this.bot.speak(this.bot.song_recap());
      }
      return log(this.bot.song_recap());
    };

    Interactivity.prototype.do_dj_announce = function(name) {
      var cb,
        _this = this;
      if (this.bot.toggles.do_dj_announce) {
        cb = function() {
          var _ref3;
          return (_ref3 = _this.bot.djannounce) != null ? _ref3 : _this.bot.speak(("Hi " + name + ".  ") + _this.bot.djannounce);
        };
        return setTimeout(cb, 2000);
      }
    };

    Interactivity.prototype.do_dj_goodbye = function() {
      var cb,
        _this = this;
      cb = function() {
        return _this.bot.speak(_this.bot.djgoodbye);
      };
      return setTimeout(cb, 2000);
    };

    Interactivity.prototype.drink_some_booze = function() {
      var cb, msg,
        _this = this;
      if (this.bot.speaker.text.match(/.j refreshing /)) {
        if (this.bot.toggles.likes_to_drink) {
          msg = (function() {
            switch (rand() % 3) {
              case 0:
                return "I don't usually drink on the job... but ok," + (" thanks " + this.bot.speaker.name + "!");
              case 1:
                return "w00t! Let's get wasted!";
              case 2:
                return "Are you trying to get me fired?" + " Do you want me to boot you?!";
            }
          }).call(this);
          cb = function() {
            return _this.bot.speak(msg);
          };
          setTimeout(cb, wait(1, 3));
        }
        return this.bot.upvote();
      }
    };

    Interactivity.prototype.drink_some_water = function() {
      var cb, msg,
        _this = this;
      if (this.bot.speaker.text.match(/.j subawater/)) {
        if (this.bot.toggles.grateful) {
          msg = (function() {
            switch (rand() % 3) {
              case 0:
                return "I appreciate the gesture, but don't you have" + " something a little stronger?";
              case 1:
                return ("Thanks " + this.bot.speaker.name + ".  All those subasnacks") + " were making me thirsty.";
              case 2:
                return "It is a bit hot in here...";
            }
          }).call(this);
          cb = function() {
            return _this.bot.speak(msg);
          };
          return setTimeout(cb, wait(1, 3));
        }
      }
    };

    Interactivity.prototype.eat_a_subasnack = function() {
      var cb,
        _this = this;
      if (this.bot.speaker.text.match(/\.j subasnack/)) {
        if (this.bot.toggles.grateful) {
          cb = function() {
            return _this.bot.speak("Thanks for the subasnack " + _this.bot.speaker.name + "!");
          };
          setTimeout(cb, wait(1, 2));
        }
        return this.bot.upvote();
      }
    };

    Interactivity.prototype.question_ones_makeup = function() {
      var cb, msg,
        _this = this;
      if (this.bot.toggles.chatty) {
        if (this.bot.speaker.text.match(/sub.* b(o|0)r?t/i) || this.bot.speaker.text.match(/b(o|0)r?t.* suba/)) {
          msg = (function() {
            switch (rand() % 5) {
              case 0:
                return 'No way!';
              case 1:
                return "Not that I'm aware of.";
              case 2:
                return "Are you questioning my humanity?";
              case 3:
                return "That's a rude question!";
              case 4:
                return "What do you think?";
            }
          })();
          cb = function() {
            return _this.bot.speak(msg);
          };
          return setTimeout(cb, wait());
        }
      }
    };

    Interactivity.prototype.time_to_dance = function() {
      var match, str;
      match = (function() {
        var _i, _len, _ref3, _results;
        _ref3 = this.bot.dance_matches;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          str = _ref3[_i];
          if (this.bot.speaker.text.match(str)) {
            _results.push(str);
          }
        }
        return _results;
      }).call(this);
      if (match.length) {
        return this.bot.upvote();
      }
    };

    Interactivity.prototype.what_are_the_rules = function() {
      if (this.bot.toggles.chatty) {
        if (this.bot.speaker.text.match(/^.j rules/)) {
          if (this.bot.room_rules) {
            return this.bot.speak(this.bot.room_rules);
          }
        }
      }
    };

    Interactivity.prototype.vote_commentary = function() {
      var msg;
      if (!this.bot.toggles.snarky) {
        return false;
      }
      msg = (function() {
        switch (rand(1, 20) % 20) {
          case 1:
            return "This song is awesome!";
          case 2:
            return "Turtle bacon anyone?";
          case 3:
            return "Dancing is fun";
          case 4:
            return "Oooooh is this the Pearls Jams?";
          case 5:
            return "b0rT!!??";
          case 6:
            return "When can I play some music?";
          case 7:
            return ":fire:";
          case 8:
            return "Yes please!?";
          case 9:
            return "I like turtles!";
          case 10:
            return "I don't especially like this song, " + ("but you are awesome " + this.bot.speaker.name + "!");
        }
      }).call(this);
      return this.bot.speak(msg);
    };

    return Interactivity;

  })();

  /*   Room class
  */


  Room = (function() {

    function Room(data) {
      this.id = null;
      this.description = null;
      this.name = null;
      this.privacy = null;
      this.snags = 0;
      this.current_dj = null;
      this.listeners = null;
      this.dj_count = null;
      this.max_djs = null;
      this.moderators = [];
      this.djs = [];
      this.votelog = [];
      this.users = [];
      this.song = {
        id: null,
        name: null,
        artist: null,
        album: null,
        length: null,
        genre: null,
        coverart: null,
        starttime: null
      };
      this.votes = {
        up: 0,
        down: 0
      };
      this.dj = {
        name: null,
        id: null
      };
      this.dj = {
        name: null,
        id: null
      };
      if (data) {
        this.update(data);
      }
    }

    Room.prototype.downvotes = function() {
      return this.votes.down;
    };

    Room.prototype.snags = function() {
      return this.snags;
    };

    Room.prototype.update_votes = function(data) {
      data = data.room.metadata;
      this.votes.up = data.upvotes;
      this.votes.down = data.downvotes;
      return this.votelog = data.votelog;
    };

    Room.prototype.update = function(data) {
      var room, song, _ref3, _ref4;
      if (!data) {
        return;
      }
      room = data.room;
      this.id = (_ref3 = room.id) != null ? _ref3 : room.roomid;
      this.description = room.description;
      this.name = room.name;
      this.privacy = room.privacy;
      this.snags = (_ref4 = room.snags) != null ? _ref4 : 0;
      if (data.users) {
        this.users = data.users;
      }
      if (room.metadata) {
        this.current_dj = room.metadata.current_dj;
        this.listeners = room.metadata.listeners;
        this.dj_count = room.metadata.djcount;
        this.max_djs = room.metadata.max_djs;
        this.moderators = room.metadata.moderator_id;
        this.djs = room.metadata.djs;
        this.votelog = room.metadata.votelog;
        song = room.metadata.current_song;
        if (song) {
          this.song = {
            id: song._id,
            name: song.metadata.song,
            artist: song.metadata.artist,
            album: song.metadata.album,
            length: song.metadata.length,
            genre: song.metadata.genre,
            coverart: song.coverart,
            starttime: song.starttime
          };
          this.dj = {
            name: song.djname,
            id: song.djid
          };
        }
        return this.votes = {
          up: room.metadata.upvotes,
          down: room.metadata.downvotes
        };
      }
    };

    Room.prototype.upvotes = function() {
      return this.votes.up;
    };

    Room.prototype.vote_percentage = function() {
      return Math.round((this.votes.up - this.votes.down + this.listeners) / (2 * this.listeners) * 100);
    };

    return Room;

  })();

  Speaker = (function() {

    Speaker.prototype.name = null;

    Speaker.prototype.id = null;

    Speaker.prototype.text = null;

    function Speaker(id, name, text) {
      this.id = id;
      this.name = name;
      this.text = text;
    }

    return Speaker;

  })();

  Pm = (function() {

    Pm.prototype.senderid = null;

    Pm.prototype.text = null;

    Pm.prototype.time = null;

    Pm.prototype.command = null;

    Pm.prototype.arg = null;

    Pm.prototype.extra_args = null;

    function Pm(pm, room, bot) {
      var match;
      this.room = room;
      this.bot = bot;
      this.senderid = pm.senderid;
      this.text = pm.text;
      this.time = pm.time;
      if (match = this.text.match(/^\.(\S+) *(.*)/)) {
        this.command = match[1];
        this.arg = match[2];
        if (this.command !== 'speak') {
          if (match = this.arg.match(/^(\S+) *(.*)/)) {
            this.arg = match[1];
            this.extra_args = match[2];
          }
        }
      }
    }

    Pm.prototype.decide = function(callback) {
      var mod, mod_ar;
      mod_ar = [];
      if (this.room && this.room.moderators) {
        mod_ar = (function() {
          var _i, _len, _ref3, _results;
          _ref3 = this.room.moderators;
          _results = [];
          for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
            mod = _ref3[_i];
            if (mod === this.senderid) {
              _results.push(mod);
            }
          }
          return _results;
        }).call(this);
      }
      if (this.senderid === VDubsId || mod_ar.length) {
        return callback(this);
      } else {
        return this.bot.pm("Sorry... I'm not allowed to talk to strangers!", this.senderid);
      }
    };

    Pm.prototype.respond = function(msg) {
      return this.bot.pm(msg, this.senderid);
    };

    return Pm;

  })();

  Moderate = (function() {

    function Moderate(bot) {
      this.bot = bot;
    }

    Moderate.prototype["do"] = function(pm) {
      return this[pm.command](pm);
    };

    Moderate.prototype.autodj = function(data) {
      return this.bot.autodj();
    };

    Moderate.prototype.dance = function(data) {
      return this.bot.upvote();
    };

    Moderate.prototype.dequeue = function(data) {
      this.bot.playlistRemove(0);
      return data.respond("Removing song from queue");
    };

    Moderate.prototype.down = function(data) {
      this.bot.dj_down();
      return this.bot.speak(":poop: :fire:");
    };

    Moderate.prototype.lame = function(data) {
      return this.bot.downvote();
    };

    Moderate.prototype.update_room_info = function() {
      return this.bot.update();
    };

    Moderate.prototype.obj = function(data) {
      return debug(this.bot[data.arg]());
    };

    Moderate.prototype.set = function(data) {
      var func, msg, to, what,
        _this = this;
      what = data.arg;
      to = data.extra_args;
      func = this.bot.toggles[what] != null ? function() {
        return _this.bot.toggle(what);
      } : this["set_" + what] != null ? function() {
        return _this["set_" + what](to, data);
      } : function() {
        return _this.bot[what] = to;
      };
      func();
      msg = to ? "" + what + " set to " + to : "" + what + " set to " + this.bot.toggles[what];
      data.respond(msg);
      return debug(msg);
    };

    Moderate.prototype.set_avatar = function(arg) {
      return this.bot.setAvatar(arg);
    };

    Moderate.prototype.set_autodj = function(arg) {
      this.bot.toggle('autodj');
      this.bot.toggle('autobop');
      return this.bot.autodj();
    };

    Moderate.prototype.set_djannounce = function(arg) {
      return this.bot.djannounce = arg;
    };

    Moderate.prototype.set_djgoodbye = function(arg) {
      return this.bot.djgoodbye = arg;
    };

    Moderate.prototype.set_snag = function(arg) {
      return this.bot.snag = arg;
    };

    Moderate.prototype.set_room = function(arg, cb) {
      var id;
      id = arg.length === 24 ? arg : config.rooms[arg];
      if (!id) {
        if (cb) {
          return cb("I don't know about room " + arg);
        }
      }
      return this.bot.roomRegister(id);
    };

    Moderate.prototype.show = function(data) {
      var setting, _ref3;
      setting = (_ref3 = this.bot.toggles[data.arg]) != null ? _ref3 : this.bot[data.arg];
      return data.respond("" + data.arg + " == " + setting);
    };

    Moderate.prototype.skip = function(data) {
      return this.bot.skip;
    };

    Moderate.prototype.snag = function(data) {
      return this.bot.snag;
    };

    Moderate.prototype.speak = function(data) {
      return this.bot.speak(data.arg);
    };

    Moderate.prototype.up = function(data) {
      this.bot.dj_up();
      return this.bot.speak("WooHoo!");
    };

    return Moderate;

  })();

  Operate = (function() {

    function Operate(bot) {
      var mod;
      this.bot = bot;
      mod = new Moderate(this.bot);
    }

    Operate.prototype["do"] = function(text) {};

    return Operate;

  })();

  UserManagement = (function() {

    function UserManagement(bot) {
      this.bot = bot;
    }

    return UserManagement;

  })();

  DJQueue = (function(_super) {

    __extends(DJQueue, _super);

    function DJQueue() {
      return DJQueue.__super__.constructor.apply(this, arguments);
    }

    DJQueue.prototype.queue = [];

    DJQueue.prototype.wait_time = 5;

    DJQueue.prototype.active = false;

    return DJQueue;

  })(UserManagement);

  FastestFingers = (function(_super) {

    __extends(FastestFingers, _super);

    function FastestFingers() {
      return FastestFingers.__super__.constructor.apply(this, arguments);
    }

    FastestFingers.prototype.djs = [];

    FastestFingers.prototype.init = function() {
      return this.bot.on('rem_dj', function(data) {
        /* IS this a pottsie?  Hold the spot for a moment to see
        @bot.speak "Possible pottsie for @bot.room."
        
          def pottsie: (id) ->
            @bot.once 'add_dj', (id) =>
        */

      });
    };

    return FastestFingers;

  })(UserManagement);

  bot = new TTBot(AUTH, USERID, ROOM);

  room = new Room;

  bot.on('ready', function() {
    return bot.roomRegister(ROOM);
  });

  bot.on('roomChanged', function(data) {
    return bot.update({
      room: data
    });
  });

  bot.on('speak', function(data) {
    var cb;
    cb = function() {
      return bot.operate();
    };
    return bot.update({
      speaker: data
    }, cb);
  });

  bot.on("add_dj", function(data) {
    return bot.do_new_dj(data);
  });

  bot.on("endsong", function() {
    return bot.do_end_song();
  });

  bot.on("newsong", function(data) {
    return bot.do_new_song(data);
  });

  bot.on("snagged", function() {
    return bot.room.snags++;
  });

  bot.on('pmmed', function(pm) {
    return bot.update({
      pm: pm
    }, bot.do_pm_action);
  });

  bot.on('update_votes', function(data) {
    return bot.update_votes(data);
  });

}).call(this);
