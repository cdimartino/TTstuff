// Generated by CoffeeScript 1.3.3
var AUTH, Bot, Moderate, Operate, Pm, ROOM, Room, Speaker, TTBot, USERID, VDubsId, auth_arg, bot, config, debug, log, rand, room, room_arg, util, wait, _ref, _ref1, _ref2,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

util = require('util');

Bot = require("../lib/ttapi/index");

config = require("../config.json");

config.debug = (_ref = process.env.DEBUG) != null ? _ref : false;

config.log = (_ref1 = process.env.LOG) != null ? _ref1 : false;

log = function(msg) {
  if (config.log) {
    return console.log(msg);
  }
};

debug = function(msg) {
  if (config.debug) {
    return console.log(msg);
  }
};

rand = function(min, max) {
  if (!min) {
    min = 1;
  }
  if (!max) {
    max = 6;
  }
  return Math.floor(Math.random() * (max - min + 1) + min);
};

wait = function(min, max) {
  if (!min) {
    min = 1;
  }
  if (!max) {
    max = 6;
  }
  return rand(min, max) * 1000;
};

VDubsId = config.userids['vdubs'];

_ref2 = process.argv.slice(2, 4), auth_arg = _ref2[0], room_arg = _ref2[1];

AUTH = config.auths[auth_arg];

USERID = config.userids[auth_arg];

ROOM = room_arg ? config.rooms[room_arg] : null;

/*   TTBot class
*/


TTBot = (function(_super) {

  __extends(TTBot, _super);

  TTBot.prototype.dance_matches = ['bop', 'dance', 'boogie', 'waltz', 'mosh', 'stagedive', 'thrash', 'salza', 'trance', 'stance', 'shake', 'rattle', 'roll', 'bounce'];

  TTBot.prototype.userId = null;

  TTBot.prototype.authId = null;

  TTBot.prototype.roomId = null;

  TTBot.prototype.votes = 0;

  TTBot.prototype.vote_attempts = 0;

  TTBot.prototype.toggles = {
    autodj: false,
    autobop: false,
    friendly: false,
    snarky: false,
    grateful: false,
    chatty: false
  };

  TTBot.prototype.djannounce = false;

  TTBot.prototype.djgoodbye = false;

  TTBot.prototype.likes_to_drink = false;

  TTBot.prototype.autodj_threshold = 2;

  function TTBot(userId, authId, roomId) {
    this.userId = userId;
    this.authId = authId;
    this.roomId = roomId;
    this.do_pm_action = __bind(this.do_pm_action, this);

    this.announce_stats = __bind(this.announce_stats, this);

    TTBot.__super__.constructor.call(this, this.userId, this.authId, this.roomId);
  }

  TTBot.prototype.reset = function() {
    this.votes = 0;
    return this.vote_attempts = 0;
  };

  TTBot.prototype.update = function(data, cb) {
    var _this = this;
    if (data) {
      debug("Updating bot with data: " + (util.inspect(data, true, 5)));
      if (data.room) {
        debug("Room info before update: " + (util.inspect(this.room)));
        if (this.room) {
          this.room.update(data.room);
        } else {
          this.room = new Room(data.room);
        }
        debug("Room info after update: " + (util.inspect(this.room)));
      }
      if (data.speaker) {
        debug("Speaker info before updte: " + (util.inspect(this.speaker)));
        this.speaker = new Speaker(data.speaker.userid, data.speaker.name, data.speaker.text);
        debug("Speaker info after updte: " + (util.inspect(this.speaker)));
      }
      if (data.pm) {
        debug("PM info before update: " + (util.inspect(this.pm_obj)));
        this.pm_obj = new Pm(data.pm, this.room, this);
        debug("PM info after update: " + (util.inspect(this.pm_obj)));
      }
    } else {
      this.roomInfo(function(data) {
        return _this.update({
          room: data
        });
      });
    }
    ({
      operator: new Operate(this),
      moderator: new Moderate(this)
    });
    if (cb) {
      return cb();
    }
  };

  TTBot.prototype.operate = function() {
    this.question_ones_makeup();
    this.eat_a_subasnack();
    this.drink_some_water();
    this.drink_some_booze();
    return this.time_to_dance();
  };

  TTBot.prototype.upvote = function() {
    var do_vote, time,
      _this = this;
    if (this.votes === 1) {
      return false;
    }
    time = wait();
    debug("#### Bopping in " + (time / 1000) + " sec #####");
    do_vote = function() {
      return _this.vote('up', function(data) {
        var _ref3;
        debug("Checking vote response: " + util.inspect(data, false, null));
        _this.vote_attempts += 1;
        if (data.err) {
          if ((_ref3 = !data.err) === "Cannot vote on your song" || _ref3 === "User has already voted up") {
            _this.votes = 0;
            log("Retrying vote");
            if (!(_this.vote_attemtps > 5)) {
              return _this.upvote();
            }
          }
        } else {
          _this.votes = 1;
          return _this.vote_commentary();
        }
      });
    };
    return setTimeout(do_vote, time);
  };

  TTBot.prototype.downvote = function() {
    if (this.votes === -1) {
      return false;
    }
    this.vote('down');
    return this.votes = -1;
  };

  TTBot.prototype.drink_some_water = function() {
    var cb, msg;
    if (this.speaker.text.match(/.j subawater/)) {
      if (this.isGrateful) {
        msg = (function() {
          switch (rand() % 3) {
            case 0:
              return "I appreciate the gesture, but don't you have something a little stronger?";
            case 1:
              return "Thanks " + this.speaker.name + ".  All those subasnacks were making me thirsty.";
            case 2:
              return "It is a bit hot in here...";
          }
        }).call(this);
        cb = function() {
          return this.speak(msg);
        };
        return setTimeout(cb, wait(1, 3));
      }
    }
  };

  TTBot.prototype.drink_some_booze = function() {
    var cb, msg;
    if (this.speaker.text.match(/.j refreshing /)) {
      if (this.likes_to_drink) {
        msg = (function() {
          switch (rand() % 3) {
            case 0:
              return "I don't usually drink on the job... but ok, thanks " + this.speaker.name + "!";
            case 1:
              return "w00t! Let's get wasted!";
            case 2:
              return "Are you trying to get me fired?  Do you want me to boot you?!";
          }
        }).call(this);
        cb = function() {
          return this.speak(msg);
        };
        setTimeout(cb, wait(1, 3));
      }
      return this.upvote();
    }
  };

  TTBot.prototype.dj_down = function() {
    return this.remdDj(USERID);
  };

  TTBot.prototype.dj_up = function() {
    return this.addDj();
  };

  TTBot.prototype.autodj_action = function() {
    if (!this.autodj && this.im_a_dj()) {
      return -1;
    }
    if (this.im_a_dj) {
      if (this.open_slots() < this.autodj_threshold + 1) {
        return -1;
      } else {
        return 0;
      }
    } else {
      if (this.open_slots() <= this.autodj_threshold) {
        return 1;
      }
    }
  };

  TTBot.prototype.open_slots = function() {
    return this.room.max_djs - this.room.djcount;
  };

  TTBot.prototype.im_a_dj = function() {
    if (this.room.djs.indexOf(this.userId) !== -1) {
      return true;
    } else {
      return false;
    }
  };

  TTBot.prototype.autodj = function() {
    var cb;
    switch (this.autodj_action()) {
      case -1:
        if (this.room.current_dj === this.userId) {
          this.speak("Turtles after this song!");
          cb = function() {
            return this.dj_down;
          };
          this.on("endsong", cb);
          return this.on("newsong", function() {
            return this.removeListener("endsong", cb);
          });
        } else {
          debug("####  Too many djs.  Getting down. ####");
          this.speak("Who likes turtles?");
          return setTimeout(this.dj_down, wait(2, 6));
        }
        break;
      case 1:
        log("#####  I'm getting up to autodj.  Current slots: " + (this.open_slots()) + "  Threshold: " + this.autodj_threshold + "  ####");
        setTimeout(this.speak("Looks like there's room for me!  w00t!"), wait());
        return this.dj_up();
    }
  };

  TTBot.prototype.eat_a_subasnack = function() {
    var cb;
    if (this.speaker.text.match(/\.j subasnack/)) {
      if (this.isGrateful) {
        cb = function() {
          return this.speak("Thanks for the subasnack " + this.speaker.name + "!");
        };
        setTimeout(cb, wait(1, 2));
      }
      return this.upvote();
    }
  };

  TTBot.prototype.time_to_dance = function() {
    var match, str;
    match = (function() {
      var _i, _len, _ref3, _results;
      _ref3 = this.dance_matches;
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        str = _ref3[_i];
        if (this.speaker.text.match(str)) {
          _results.push(str);
        }
      }
      return _results;
    }).call(this);
    util.inspect(match);
    if (match.length) {
      return this.upvote();
    }
  };

  TTBot.prototype.announce_stats = function() {
    debug("#### Speaking song stats ####");
    log(this.song_recap());
    return this.speak(this.song_recap());
  };

  TTBot.prototype.do_pm_action = function() {
    var m,
      _this = this;
    m = new Moderate(this);
    return this.pm_obj.decide(function(pm) {
      return m["do"](pm);
    });
  };

  TTBot.prototype.do_dj_announce = function() {
    var cb;
    cb = function() {
      return this.speak(this.djannounce);
    };
    return setTimeout(cb, 2000);
  };

  TTBot.prototype.do_dj_goodbye = function() {
    var cb;
    cb = function() {
      return this.speak(this.djgoodbye);
    };
    return setTimeout(cb, 2000);
  };

  TTBot.prototype.song_recap = function() {
    return "" + this.room.dj.name + " Played: " + this.room.song.artist + " -- " + this.room.song.name + " -- :thumbsup:: " + this.room.votes.up + " :thumbsdown:: " + this.room.votes.down + " :heart:: " + this.room.snags + " :tomato:: " + (Math.round(this.room.vote_percentage())) + "%";
  };

  TTBot.prototype.log_song_info = function() {
    debug("#### Logging song stats ####");
    return log(this.song_recap());
  };

  TTBot.prototype.vote_commentary = function() {
    if (!bot.isSnarky) {
      return false;
    }
    switch (time / 1000) {
      case 1:
        return bot.speak("This song is awesome!");
      case 2:
        return bot.speak("Turtle bacon anyone?");
      case 3:
        return bot.speak("Dancing is fun");
      case 4:
        return bot.speak("Oooooh is this the Pearls Jams?");
      case 5:
        return bot.speak("b0rT!!??");
      case 6:
        return bot.speak("When can I play some music?");
      case 7:
        return bot.speak(":fire:");
      case 8:
        return bot.speak("/q please?");
      case 9:
        return bot.speak("I like turtles!");
    }
  };

  TTBot.prototype.question_ones_makeup = function() {
    var cb, msg;
    if (this.speaker.text.match(/sub.* bot/i)) {
      msg = (function() {
        switch (rand() % 5) {
          case 0:
            return 'No way!';
          case 1:
            return "Not that I'm aware of.";
          case 2:
            return "Are you questioning my humanity?";
          case 3:
            return "That's a rude question!";
          case 4:
            return "What do you think?";
        }
      })();
      cb = function() {
        return this.speak(msg);
      };
      return setTimeout(cb, wait());
    }
  };

  TTBot.prototype.toggle = function(which) {
    return this.toggles[which] = !this.toggles[which];
  };

  TTBot.prototype.update_votes = function(data) {
    return this.room.update_votes(data);
  };

  return TTBot;

})(Bot);

/*   Room class
*/


Room = (function() {

  function Room(data) {
    this.id = null;
    this.description = null;
    this.name = null;
    this.privacy = null;
    this.snags = 0;
    this.current_dj = null;
    this.listeners = null;
    this.dj_count = null;
    this.max_djs = null;
    this.moderators = [];
    this.djs = [];
    this.votelog = [];
    this.users = [];
    this.song = {
      id: null,
      name: null,
      artist: null,
      album: null,
      length: null,
      genre: null,
      coverart: null,
      starttime: null
    };
    this.votes = {
      up: 0,
      down: 0
    };
    this.dj = {
      name: null,
      id: null
    };
    this.dj = {
      name: null,
      id: null
    };
    if (data) {
      this.update(data);
    }
  }

  Room.prototype.downvotes = function() {
    return this.votes.down;
  };

  Room.prototype.snags = function() {
    return this.snags;
  };

  Room.prototype.update_votes = function(data) {
    data = data.room.metadata;
    this.votes.up = data.upvotes;
    this.votes.down = data.downvotes;
    return this.votelog = data.votelog;
  };

  Room.prototype.update = function(data) {
    var room, song, _ref3;
    if (!data) {
      return;
    }
    room = data.room;
    this.id = (_ref3 = room.id) != null ? _ref3 : room.roomid;
    this.description = room.description;
    this.name = room.name;
    this.privacy = room.privacy;
    if (data.users) {
      this.users = data.users;
    }
    if (room.metadata) {
      this.current_dj = room.metadata.current_dj;
      this.listeners = room.metadata.listeners;
      this.dj_count = room.metadata.djcount;
      this.max_djs = room.metadata.max_djs;
      this.moderators = room.metadata.moderator_id;
      this.djs = room.metadata.djs;
      this.votelog = room.metadata.votelog;
      song = room.metadata.current_song;
      if (song) {
        this.song = {
          id: song._id,
          name: song.metadata.song,
          artist: song.metadata.artist,
          album: song.metadata.album,
          length: song.metadata.length,
          genre: song.metadata.genre,
          coverart: song.coverart,
          starttime: song.starttime
        };
        this.dj = {
          name: song.djname,
          id: song.djid
        };
      }
      return this.votes = {
        up: room.metadata.upvotes,
        down: room.metadata.downvotes
      };
    }
  };

  Room.prototype.upvotes = function() {
    return this.votes.up;
  };

  Room.prototype.vote_percentage = function() {
    return Math.round((this.votes.up - this.votes.down + this.listeners) / (2 * this.listeners) * 100);
  };

  return Room;

})();

Speaker = (function() {

  Speaker.prototype.name = null;

  Speaker.prototype.id = null;

  Speaker.prototype.text = null;

  function Speaker(id, name, text) {
    this.id = id;
    this.name = name;
    this.text = text;
  }

  return Speaker;

})();

Pm = (function() {

  Pm.prototype.senderid = null;

  Pm.prototype.text = null;

  Pm.prototype.time = null;

  Pm.prototype.command = null;

  Pm.prototype.arg = null;

  Pm.prototype.extra_args = null;

  function Pm(pm, room, bot) {
    var match;
    this.room = room;
    this.bot = bot;
    this.senderid = pm.senderid;
    this.text = pm.text;
    this.time = pm.time;
    if (match = this.text.match(/^\.(\S+) *(.*)/)) {
      this.command = match[1];
      this.arg = match[2];
      if (match = this.arg.match(/^(\S+) *(.*)/)) {
        this.arg = match[1];
        this.extra_args = match[2];
      }
    }
  }

  Pm.prototype.decide = function(callback) {
    var mod, mod_ar;
    if (this.room && this.room.moderators) {
      mod_ar = (function() {
        var _i, _len, _ref3, _results;
        _ref3 = this.room.moderators;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          mod = _ref3[_i];
          if (mod === this.senderid) {
            _results.push(mod);
          }
        }
        return _results;
      }).call(this);
    }
    if (this.senderid === VDubsId || mod_ar.length) {
      return callback(this);
    } else {
      return this.bot.pm("Sorry... I'm not allowed to talk to strangers!", this.senderid);
    }
  };

  Pm.prototype.respond = function(msg) {
    return this.bot.pm(msg, this.senderid);
  };

  return Pm;

})();

Moderate = (function() {

  function Moderate(bot) {
    this.bot = bot;
  }

  Moderate.prototype["do"] = function(pm) {
    return this[pm.command](pm);
  };

  Moderate.prototype.autodj = function(data) {
    return this.bot.autodj();
  };

  Moderate.prototype.dance = function(data) {
    return this.bot.upvote();
  };

  Moderate.prototype.dequeue = function(data) {
    this.bot.playlistRemove(0);
    return data.respond("Removing song from queue");
  };

  Moderate.prototype.down = function(data) {
    this.bot.dj_down();
    return this.bot.speak(":poop: :fire:");
  };

  Moderate.prototype.lame = function(data) {
    return this.bot.downvote();
  };

  Moderate.prototype.update_room_info = function() {
    return this.bot.update();
  };

  Moderate.prototype.obj = function(data) {
    return debug(this.bot[data.arg]());
  };

  Moderate.prototype.set = function(data) {
    var msg, to, what;
    what = data.arg;
    to = data.extra_args;
    this["set_" + what](to, data);
    msg = to ? "" + what + " set to " + to : "" + what + " set to " + this.bot[what];
    data.respond(msg);
    return debug(msg);
  };

  Moderate.prototype.set_avatar = function(arg) {
    return this.bot.setAvatar(arg);
  };

  Moderate.prototype.set_friendly = function(arg) {
    return this.bot.toggle('friendly');
  };

  Moderate.prototype.set_chatty = function(arg) {
    return this.bot.toggle('chatty');
  };

  Moderate.prototype.set_grateful = function(arg) {
    return this.bot.toggle('grateful');
  };

  Moderate.prototype.set_snide = function(arg) {
    return this.bot.toggle('snide');
  };

  Moderate.prototype.set_autodj = function(arg) {
    this.bot.toggle('autodj');
    this.bot.toggle('autobop');
    return this.bot.autodj();
  };

  Moderate.prototype.set_djannounce = function(arg) {
    return this.bot.djannounce = arg;
  };

  Moderate.prototype.set_djgoodbye = function(arg) {
    return this.bot.djgoodbye = arg;
  };

  Moderate.prototype.set_snag = function(arg) {
    return this.bot.snag = arg;
  };

  Moderate.prototype.set_room = function(arg, cb) {
    var id;
    id = arg.length === 24 ? arg : config.rooms[arg];
    if (!id) {
      if (cb) {
        return cb("I don't know about room " + arg);
      }
    }
    return this.bot.roomRegister(id);
  };

  Moderate.prototype.show = function(data) {
    var _ref3;
    return data.respond((_ref3 = this.bot.toggles[data.arg]) != null ? _ref3 : this.bot[data.arg]);
  };

  Moderate.prototype.skip = function(data) {
    return this.bot.skip;
  };

  Moderate.prototype.snag = function(data) {
    return this.bot.snag;
  };

  Moderate.prototype.speak = function(data) {
    return this.bot.speak(data.text);
  };

  Moderate.prototype.up = function(data) {
    this.bot.dj_up();
    return this.bot.speak("WooHoo!");
  };

  return Moderate;

})();

Operate = (function() {

  function Operate(bot) {
    var mod;
    this.bot = bot;
    mod = new Moderate(this.bot);
  }

  Operate.prototype["do"] = function(text) {};

  return Operate;

})();

bot = new TTBot(AUTH, USERID, ROOM);

room = new Room;

bot.on('ready', function() {
  return bot.roomRegister(ROOM);
});

bot.on('roomChanged', function(data) {
  return bot.update({
    room: data
  });
});

bot.on('speak', function(data) {
  var cb;
  cb = function() {
    return bot.operate();
  };
  return bot.update({
    speaker: data
  }, cb);
});

bot.on("endsong", function() {
  bot.announce_stats();
  return bot.autodj();
});

bot.on("newsong", function(data) {
  return bot.update({
    room: data
  });
});

bot.on("snagged", function() {
  return bot.room.snags++;
});

bot.on('pmmed', function(pm) {
  return bot.update({
    pm: pm
  }, bot.do_pm_action);
});

bot.on('update_votes', function(data) {
  return bot.update_votes(data);
});
